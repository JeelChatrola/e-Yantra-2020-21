#!/usr/bin/env python

import rospy
import actionlib
import time

from pkg_ros_iot_bridge.msg import msgRosIotAction
from pkg_ros_iot_bridge.msg import msgRosIotGoal
from pkg_ros_iot_bridge.msg import msgRosIotResult

from pkg_task1.msg import msgTurtleAction       # Message Class that is used by ROS Actions internally
from pkg_task1.msg import msgTurtleGoal         # Message Class that is used for Goal messages

from pkg_ros_iot_bridge.msg import msgMqttSub

class SimpleActionClientTurtle:

    # Constructor
    def __init__(self, obj_mqtt_client):
        self.obj_mqtt_client = obj_mqtt_client

        self._ac = actionlib.SimpleActionClient('/action_turtle',
                                                msgTurtleAction)

        self._config_ros_sub_topic = "/ros_iot_bridge/mqtt/sub"

        # self._time_ros = {}
        # self._topic_ros = " "
        # self._msg_ros = " "

        self._ac.wait_for_server()
        rospy.loginfo("Turtle - Action server is up, we can send new goals!")

        self.counter = 0

    def func_ros_sub_callback(self, mqtt_data):
        self._time_ros = mqtt_data.timestamp
        self._topic_ros = mqtt_data.topic
        self._msg_ros = mqtt_data.message

        if self._msg_ros == 'Start':

            self.send_goal(2, 0)
            rospy.sleep(6)
            # print("***** First Side *****")

            self.send_goal(2, 60)
            rospy.sleep(12)
            # print("***** Second Side *****")

            self.send_goal(2, 60)
            rospy.sleep(12)
            # print("***** Third Side *****")

            self.send_goal(2, 60)
            rospy.sleep(12)
            # print("***** Fourth Side *****")
                
            self.send_goal(2, 60)
            rospy.sleep(12)
            # print("***** Fifth Side *****")

            self.send_goal(2, 60)
            # print("***** Sixth Side *****")

    def send_goal(self, arg_dis, arg_angle):
        
        # Create Goal message for Simple Action Server
        goal = msgTurtleGoal(distance=arg_dis, angle=arg_angle)
        
        '''
            * done_cb is set to the function pointer of the function which should be called once 
                the Goal is processed by the Simple Action Server.

            * feedback_cb is set to the function pointer of the function which should be called while
                the goal is being processed by the Simple Action Server.
        ''' 
        self._ac.send_goal(goal, done_cb=self.done_callback,
                           feedback_cb=self.feedback_callback)
        
        rospy.loginfo("Goal has been sent.")


    # Function print result on Goal completion
    def done_callback(self, status, result):
        self.counter += 1
        rospy.loginfo("Status is : " + str(status))
        rospy.loginfo("Result is : ({}, {}, {})".format(result.final_x, result.final_y, result.final_theta))

        self.final_res = str(result.final_x) + ", " + str(result.final_y) + ", " + str(result.final_theta)

        goal_handle1 = self.obj_mqtt_client.send_goal("mqtt", "pub", self.obj_mqtt_client._config_mqtt_pub_topic, self.final_res)
        self.obj_mqtt_client._goal_handles[str(self.counter)] = goal_handle1

    # Function to print feedback while Goal is being processed
    def feedback_callback(self, feedback):
        rospy.loginfo(feedback)


class RosIotBridgeActionClient:

    # Constructor
    def __init__(self):

        # Initialize Action Client
        self._riac = actionlib.ActionClient('/action_ros_iot',
                                          msgRosIotAction)
        
        # Dictionary to Store all the goal handels
        self._goal_handles = {}

        # Store the MQTT Topic on which to Publish in a variable
        param_config_iot = rospy.get_param('config_pyiot')
        self._config_mqtt_pub_topic = param_config_iot['mqtt']['topic_pub']

        # Wait for Action Server that will use the action - '/action_iot_ros' to start
        self._riac.wait_for_server()
        rospy.loginfo("Ros - Iot - Action server up, we can send goals.")

    
    # This function will be called when there is a change of state in the Action Client State Machine
    def on_transition(self, goal_handle):
        
        # from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.
        
        result = msgRosIotResult()

        index = 0
        for i in self._goal_handles:
            if self._goal_handles[i] == goal_handle:
                index = i
                break

        rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(index))
        rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()) )
        rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()) )
        
        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done
        
        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")
        
        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())
            
            # get_result() gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result.flag_success)

            if (result.flag_success == True):
                rospy.loginfo("Goal successfully completed. Client Goal Handle #: " + str(index))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(index))


    # This function is used to send Goals to Action Server
    def send_goal(self, arg_protocol, arg_mode, arg_topic, arg_message):
        # Create a Goal Message object
        goal = msgRosIotGoal()

        goal.protocol = arg_protocol
        goal.mode = arg_mode
        goal.topic = arg_topic
        goal.message = arg_message

        rospy.loginfo("Send goal.")
        
        # self.on_transition - It is a function pointer to a function which will be called when 
        #                       there is a change of state in the Action Client State Machine
        goal_handle = self._riac.send_goal(goal,
                                         self.on_transition,
                                         None)

        return goal_handle

# Main Function
def main():
    
    rospy.init_node('node_iot_action_client_turtle')

    obj_mqtt_client = RosIotBridgeActionClient()
    rospy.sleep(5)
    obj_client = SimpleActionClientTurtle(obj_mqtt_client)

    handle_sub_mqtt = rospy.Subscriber(obj_client._config_ros_sub_topic, msgMqttSub, obj_client.func_ros_sub_callback)

    rospy.spin()


if __name__ == '__main__':
    main()
